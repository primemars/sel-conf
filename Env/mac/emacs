;; -*-Emacs-Lisp-*-

;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")

;;;; shutdown the begining of log
(setq inhibit-startup-message t)

;; Simple Lisp Files
(add-to-list 'load-path "~/.emacs.d/.site-lisp/el")

;;;; Basic customize
(setq tab-width 2)
(setq make-backup-files nil)
;(menu-bar-mode nil)
(setq fill-column 70)
(auto-fill-mode)

(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")

;; make #! scripts executable after saving them
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; Meta
(global-set-key "\M- " 'set-mark-command)
(global-set-key "\M-\C-r" 'query-replace)
(global-set-key "\M-r" 'replace-string)
(global-set-key "\M-g" 'goto-line)

(transient-mark-mode 1)
(setq mark-even-if-inactive t)
(setq visible-bell nil)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(setq show-trailing-whitespace t)

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(show-paren-mode t)
(setq show-paren-style 'parentheses)
(mouse-avoidance-mode 'animate)
(auto-image-file-mode)

;;;; Add different mode

;; add egg(git)
(require 'git)
(require 'git-blame)

;; add yasnippet
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas/global-mode 1)

;; auto-complete
(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins/auto-complete//ac-dict")
(ac-config-default)

;;add ido
(require 'ido)
(ido-mode t)

;;add gtags
(require 'gtags)

;;add yaml mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;; add line number
(require 'setnu+)

(add-hook 'dired-load-hook
   (function (lambda() (load "dired-x"))))

;; settings for scheme-mode
(add-hook 'scheme-mode-hook
          '(lambda ()
             (setq scheme-program-name "guile")
             (setq scheme-mit-dialect nil)
             ))

(require 'desktop)

;; New dabbrev stuff
(setq dabbrev-always-check-other-buffers t)
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")

(add-hook 'text-mode-hook
      '(lambda ()
         (set (make-local-variable 'dabbrev-case-fold-search) t)
         (setq truncate-lines t)
         (setq truncate-partial-width-windows t)
         (set (make-local-variable 'dabbrev-case-replace) t)))

;; Complement to next-error
(defun previous-error (n)
  "Visit previous compilation error message and corresponding source code."
  (interactive "p")
  (next-error (- n)))


;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      (desktop-load-default)
      (desktop-read)))


;;; Emacs/W3 Configuration
(setq load-path (cons "/usr/share/emacs/site-lisp" load-path))
(condition-case () (require 'w3-auto "w3-auto") (error nil))


;; javascript mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;; sgml
(add-to-list 'auto-mode-alist (cons  "\\.erb" 'sgml-mode))

;; rinari
(add-to-list 'load-path "~/.emacs.d/.site-lisp/rinari")
(require 'rinari)

;; zencoding
(require 'zencoding-mode)
(add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes

;; markdown
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t) 
(setq auto-mode-alist (cons '("\\.md" . markdown-mode) auto-mode-alist))




;; Function keys
(global-set-key [f1] 'revert-buffer)
(global-set-key [f2] 'info)
(global-set-key [f3] 'repeat-complex-command)
(global-set-key [f4] 'advertised-undo)
(global-set-key [f5] 'eval-current-buffer)
(global-set-key [f6] 'buffer-menu)
(global-set-key [f7] 'other-window)
(global-set-key [f8] 'find-file)
(global-set-key [f9] 'previous-error)
(global-set-key [f10] 'next-error)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'grep)

; change c-w
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)

;; No need to debug anything now
(setq debug-on-error nil)
;; Indicate that this file has been read at least once
(setq first-time nil)


;; All done
(message "All done, %s%s" (user-login-name) ".")
