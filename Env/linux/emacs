;; -*-Emacs-Lisp-*-

;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")

;shutdown the begining of log
(setq inhibit-startup-message t)
;Simple Lisp Files
(add-to-list 'load-path "~/.emacs.d/.site-lisp/el")
(add-to-list 'load-path "~/.emacs.d")

;Add modes start

;add yaml mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

(add-hook 'dired-load-hook
   (function (lambda() (load "dired-x"))))

(require 'desktop)

;; when edit css file, display the color based on the color code
(defvar hexcolour-keywords
  '(("#[abcdef[:digit:]]\\{6\\}"
     (0 (put-text-property
         (match-beginning 0)
         (match-end 0)
         'face (list :background
                     (match-string-no-properties 0)))))))
(defun hexcolour-add-to-font-lock ()
  (font-lock-add-keywords nil hexcolour-keywords))
(add-hook 'css-mode-hook 'hexcolour-add-to-font-lock)

;; New dabbrev stuff
(setq dabbrev-always-check-other-buffers t)
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")

(add-hook 'text-mode-hook
      '(lambda ()
         (set (make-local-variable 'dabbrev-case-fold-search) t)
         (setq truncate-lines t)
         (setq truncate-partial-width-windows t)
         (set (make-local-variable 'dabbrev-case-replace) t)))

;; Complement to next-error
(defun previous-error (n)
  "Visit previous compilation error message and corresponding source code."
  (interactive "p")
  (next-error (- n)))


;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      (desktop-load-default)
      (desktop-read)))


;;yari, ri in buffer
(require 'yari)
(defun ri-bind-key ()
   (local-set-key [f2] 'yari))
(add-hook 'ruby-mode-hook 'ri-bind-key)

;; cucumber feature mode
(add-to-list 'load-path "~/.emacs.d/.site-lisp/feature-mode")
(setq feature-default-language "fi")
(setq feature-default-i18n-file "~/.emacs.d/.site-lisp/feature-mode/i18n.yml")
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))

(add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))

;; open recentf-mode
(recentf-mode 1)

;javascript mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;; sgml
(add-to-list 'auto-mode-alist (cons  "\\.erb" 'html-mode))

;;rinari
(add-to-list 'load-path "~/.emacs.d/.site-lisp/rinari")
(require 'rinari)
; When entering rinari-minor-mode, consider also the snippets in the                                                                                        ;; snippet table "rails-mode"
;(add-hook 'rinari-minor-mode-hook
;         '(lambda ()
;            (setq yas/mode-symbol 'rails-mode)))

;;zencoding
(require 'zencoding-mode)
(add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes

;;markdown
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(setq auto-mode-alist (cons '("\\.md" . markdown-mode) auto-mode-alist))
;;Add modes end

;;;; Self customize start

;;self utilization
;(load "mars.el")
;(load "my_emacs_abbrev")

;;alias
(defalias 'list-buffers 'ibuffer)

;; Often used recently
(global-set-key (kbd "M-1") (lambda () "" (interactive) (find-file "~/Dropbox/notes/inbox.org")))
(global-set-key (kbd "M-2") (lambda () "" (interactive) (find-file "/var/log/maui/gui.log")))
(global-set-key (kbd "M-3") 'open-bug)
(global-set-key (kbd "M-4") 'google-it)
(global-set-key (kbd "M-5") 'open-gui-idea)

;; Function keys
(global-set-key [f1] 'repeat-complex-command)
(global-set-key [f2] 'recentf-open-files)
(global-set-key [f3] 'undo)
(global-set-key [f4] 'find-file-at-point)
(global-set-key [f5] 'revert-buffer)
; f6 for maroc temeporary
(global-set-key [f7] 'eval-region)
(global-set-key [f9] 'previous-error)
(global-set-key [f10] 'next-error)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'grep)

; change c-w
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)

; re-map alt-x
(global-set-key "\C-x\C-m" 'execute-extended-command)

(setq tab-width 2)
(setq make-backup-files nil)

(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")

;; make #! scripts executable after saving them
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)


;; For mobile org
;; Set to the location of your Org files on your local system
(setq org-directory "~/Dropbox/notes")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/notes/index.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/notes/MobileOrg")

;; Meta
(global-set-key "\M- " 'set-mark-command)
(global-set-key "\M-\C-r" 'query-replace)
(global-set-key "\M-r" 'replace-string)
(global-set-key "\M-g" 'goto-line)

(setq auto-fill-mode t)
(transient-mark-mode 1)
(setq mark-even-if-inactive t)
(setq visible-bell nil)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(show-paren-mode t)
(setq show-paren-style 'parentheses)
(mouse-avoidance-mode 'animate)
(auto-image-file-mode)
(setq fill-column 70)

;; Add yasnippet
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(setq yas-snippet-dirs '("~/.emacs.d/plugins/yasnippet/snippets" "~/.emacs.d/plugins/yasnippet/extras/imported"))
(yas-global-mode 1)

;; Show trailing whitespace
(custom-set-variables
 '(show-trailing-whitespace t))

(setq tab-width 2)
;;;; Self customize end

;; No need to debug anything now
(setq debug-on-error nil)
;; Indicate that this file has been read at least once
(setq first-time nil)

;; All done
(message "All done, %s%s" (user-login-name) ".")
