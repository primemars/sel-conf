;; -*-Emacs-Lisp-*-

;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")

;; **********************************************************************
;  Lib path
;; ======================================================================
;; Simple Lisp Files
(add-to-list 'load-path "~/Dropbox/selF/Env/emacs.d/.site-lisp/el")

;; **********************************************************************
;  OS related
;; ======================================================================

(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

;;;; shutdown the begining of log
(setq inhibit-startup-message t)

(if (eq window-system 'x)
    (progn
      (my-make-face 'blue "blue")
      (my-make-face 'red "red")
      (my-make-face 'green "dark green")
      (setq font-lock-comment-face 'blue)
      (setq font-lock-string-face 'bold)
      (setq font-lock-type-face 'bold)
      (setq font-lock-keyword-face 'bold)
      (setq font-lock-function-name-face 'red)
      (setq font-lock-doc-string-face 'green)
      (add-hook 'find-file-hooks 'font-lock-auto-mode-select)

      (setq baud-rate 1000000)
      (global-set-key "\C-cmm" 'menu-bar-mode)
      (global-set-key "\C-cms" 'scroll-bar-mode)
      (global-set-key [backspace] 'backward-delete-char)
                    ;      (global-set-key [delete] 'delete-char)
      (standard-display-european t)
      (load-library "iso-transl")))

;; X11 or PC using direct screen writes
(if window-system
    (progn
      ;;      (global-set-key [M-f1] 'hilit-repaint-command)
      ;;      (global-set-key [M-f2] [?\C-u M-f1])
      (setq hilit-mode-enable-list
        '(not text-mode c-mode c++-mode emacs-lisp-mode lisp-mode
          scheme-mode)
        hilit-auto-highlight nil
        hilit-auto-rehighlight 'visible
        hilit-inhibit-hooks nil
        hilit-inhibit-rebinding t)
      (require 'paren))
  (setq baud-rate 2400)         ; For slow serial connections
  )

;; **********************************************************************
;  Basic configuration
;; ======================================================================

;;set todo directory
(setq todo-file-do "~/todo/do")
(setq todo-file-done "~/todo/done")
(setq todo-file-top "~/todo/top")

;;set tab width
(setq tab-width 4)

;; color/font settings
(set-background-color "Black")
(set-foreground-color "White")
(set-cursor-color "LightGreen")

;;close tool bar and menu bar
;;(tool-bar-mode nil)
(menu-bar-mode nil)

;; Prevent Emacs from making backup files
(setq make-backup-files nil)

;; Font lock mode
(defun my-make-face (face color &optional bold)
  "Create a face from a color and optionally make it bold"
  (make-face face)
  (copy-face 'default face)
  (set-face-foreground face color)
  (if bold (make-face-bold face))
  )

;; Treat 'y' or <CR> as yes, 'n' as no.
(fset 'yes-or-no-p 'y-or-n-p)
(define-key query-replace-map [return] 'act)
(define-key query-replace-map [?\C-m] 'act)


;; Complement to next-error
(defun previous-error (n)
  "Visit previous compilation error message and corresponding source code."
  (interactive "p")
  (next-error (- n)))

;; Misc...
(transient-mark-mode 1)
(setq mark-even-if-inactive t)
(setq visible-bell nil)
(setq next-line-add-newlines nil)
(setq compile-command "make")
(setq suggest-key-bindings nil)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(if (>= emacs-major-version 21)
    (setq show-trailing-whitespace t))


;;; add these lines if you like color-based syntax highlighting
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(show-paren-mode t)
(setq show-paren-style 'parentheses)
(mouse-avoidance-mode 'animate)
(auto-image-file-mode)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(egg-enable-tooltip t)
 '(fill-column 70)
 '(rails-ws:default-server-type "webrick")
 '(safe-local-variable-values (quote ((todo-categories "" "today" "this week" "this month" "this year") (todo-categories "today" "this week" "this month" "this year") (todo-categories "" "" "" "" "today" "this week" "y" "this month" "this year" "word" "personal" "work") (todo-categories "word" "personal" "work") (todo-categories "personal" "work"))))
 '(truncate-lines nil)
 '(truncate-partial-width-windows nil))


;; A package 'uniquify' changes the default naming of buffers to include parts of the file name (directory names) until the buffer names are unique.
;; For instance, buffers visiting the files:
;;     /u/mernst/tmp/Makefile
;;     /usr/projects/zaphod/Makefile
;; would be named
;;     Makefile|tmp
;;     Makefile|zaphod
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

;; **********************************************************************
;  Gloabal key settings
;; ======================================================================

(global-set-key (kbd "M-1") (lambda () "" (interactive) (find-file "~/Dropbox/notes/inbox.org")))

;;windmove
(global-set-key [?\e left] 'windmove-left)
(global-set-key [?\e right] 'windmove-right)
(global-set-key [?\e up] 'windmove-up)
(global-set-key [?\e down] 'windmove-down)

; change c-w
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)

;; Meta
(global-set-key "\M- " 'set-mark-command)
(global-set-key "\M-\C-r" 'query-replace)
(global-set-key "\M-r" 'replace-string)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-h" 'help-command)

;; Function keys
;;(global-set-key [f1] 'browse-url-lynx-emacs)
;; Function keys
(global-set-key [f1] 'repeat-complex-command)
(global-set-key [f2] 'recentf-open-files)
(global-set-key [f3] 'undo)
(global-set-key [f4] 'find-file-at-point)
(global-set-key [f5] 'revert-buffer)
; f6 for maroc temeporary
(global-set-key [f7] 'eval-region)
(global-set-key [f9] 'previous-error)
(global-set-key [f10] 'next-error)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'grep)

;; Keypad bindings
(global-set-key [up] "\C-p")
(global-set-key [down] "\C-n")
(global-set-key [left] "\C-b")
(global-set-key [right] "\C-f")
(global-set-key [home] "\C-a")
(global-set-key [end] "\C-e")
(global-set-key [prior] "\M-v")
(global-set-key [next] "\C-v")
(global-set-key [C-up] "\M-\C-b")
(global-set-key [C-down] "\M-\C-f")
(global-set-key [C-left] "\M-b")
(global-set-key [C-right] "\M-f")
(global-set-key [C-home] "\M-<")
(global-set-key [C-end] "\M->")
(global-set-key [C-prior] "\M-<")
(global-set-key [C-next] "\M->")


;; **********************************************************************
;  Modes
;; ======================================================================
;; add egg(git)
(require 'git)
(require 'git-blame)
 
;;add yaml mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;; add line number
(require 'pabbrev)

;; Load packages
(require 'desktop)
(require 'tar-mode)

;; For mobile org
;; Set to the location of your Org files on your local system
(setq org-directory "~/Dropbox/notes")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/notes/index.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/notes/MobileOrg")

;; Pretty diff mode
(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")


;;; Emacs/W3 Configuration
(setq load-path (cons "/usr/share/emacs/site-lisp" load-path))
(condition-case () (require 'w3-auto "w3-auto") (error nil))


;;ruby
(setq load-path (cons "~/Dropbox/selF/Env/emacs.d/.site-lisp/ruby-mode" load-path))
(autoload 'ruby-mode "ruby-mode" "Load ruby-mode")
(add-hook 'ruby-mode-hook 'turn-on-font-lock)

;; javascript-mode
(autoload 'javascript-mode "javascript" nil t)
(setq js-indent-level 4)


(if first-time
    (setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)
		("\\.\\(js\\|as\\|json\\|jsn\\)\\'" . javascript-mode)
		) auto-mode-alist)))



;;**********************************************************************
;; self customize
;;======================================================================
;; Insert text for ruby mode
(add-hook 'ruby-mode-hook
 (lambda ()
   (local-set-key 
    (kbd "\C-c d") 
    (lambda()
      (interactive)
      (insert "require 'rubygems';require 'ruby-debug';debugger")))))


; **********************************************************************
;  Finalize
;; ======================================================================

;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      (desktop-load-default)
      (desktop-read)))

;; No need to debug anything now
(setq debug-on-error nil)

;; All done
(message "All done, %s%s" (user-login-name) ".")

